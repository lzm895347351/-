import tensorflow as tf
batch_size = 12
#初始化权值
def weight_va(shape,ming):
    initial = tf.truncated_normal(shape,stddev=0.1)
    return tf.Variable(initial,name = ming)
#初始化偏执值
def bias_va(shape,ming):
    initial = tf.constant(0.1,shape=shape)
    return tf.Variable(initial,name = ming)
#一步卷积操作
def conv2d_1(x,W):
    #x 输入的张量形状[批次，长，宽，通道数] 彩色图片通道数为3
    #W 滤波器张量[长，宽，输入通道数，输出通道数]
    return tf.nn.conv2d(x,W,strides=[1,1,1,1],padding='SAME')
#两步卷积操作
def conv2d_2(x,W):
    #x 输入的张量形状[批次，长，宽，通道数] 彩色图片通道数为3 
    #W 滤波器张量[长，宽，输入通道数，输出通道数]
    return tf.nn.conv2d(x,W,strides=[1,2,2,1],padding='SAME')
#一步反卷积
def deconv2d_2(x,W,out):
    #x 输入的张量形状[批次，长，宽，通道数] 彩色图片通道数为3 
    #W 滤波器张量[长，宽，输入通道数，输出通道数]
    return tf.nn.conv2d_transpose(x,W,out,strides=[1,2,2,1],padding='SAME')
#两步反卷积
def deconv2d_1(x,W,out):
    #x 输入的张量形状[批次，长，宽，通道数] 彩色图片通道数为3 
    #W 滤波器张量[长，宽，输入通道数，输出通道数]
    return tf.nn.conv2d_transpose(x,W,out,strides=[1,1,1,1],padding='SAME')


source = tf.placeholder(tf.float32,[None,128,128,3],name = 'source' )
target = tf.placeholder(tf.float32,[None,128,128,3],name = 'target' )
thflow = tf.placeholder(tf.float32,[None,128,128,2],name = 'thflow' )
thmatch = tf.placeholder(tf.float32,[None,128,128,2],name = 'thmatch')

#孪生子卷积网络
#第一层
with tf.name_scope('encoding_layer1'):
    W_conv1 = weight_va([3,3,3,16],'W1')
    b_conv1 = bias_va([16],'b1')
    with tf.name_scope('sh_conv1'):
        sh_conv1 = tf.nn.relu(conv2d_1(source,W_conv1)+b_conv1)
    with tf.name_scope('th_conv1'):
        th_conv1 = tf.nn.relu(conv2d_1(target,W_conv1)+b_conv1)
    
#第二层
with tf.name_scope('encoding_layer2'):
    W_conv2 = weight_va([3,3,16,32],'W2')
    b_conv2 = bias_va([32],'b2')
    with tf.name_scope('sh_conv2'):
        sh_conv2 = tf.nn.relu(conv2d_2(sh_conv1,W_conv2)+b_conv2)
    with tf.name_scope('th_conv2'):
        th_conv2 = tf.nn.relu(conv2d_2(th_conv1,W_conv2)+b_conv2)
    
    
#第三层
with tf.name_scope('encoding_layer3'):
    W_conv3 = weight_va([3,3,32,32],'W3')
    b_conv3 = bias_va([32],'b3')
    with tf.name_scope('sh_conv3'):
        sh_conv3 = tf.nn.relu(conv2d_1(sh_conv2,W_conv3)+b_conv3)
    with tf.name_scope('th_conv3'):
        th_conv3 = tf.nn.relu(conv2d_1(th_conv2,W_conv3)+b_conv3)
    
#第四层
with tf.name_scope('encoding_layer4'):
    W_conv4 = weight_va([3,3,32,64],'W4')
    b_conv4 = bias_va([64],'b4')
    with tf.name_scope('sh_conv4'):
        sh_conv4 = tf.nn.relu(conv2d_2(sh_conv3,W_conv4)+b_conv4)
    with tf.name_scope('th_conv4'):
        th_conv4 = tf.nn.relu(conv2d_2(th_conv3,W_conv4)+b_conv4)
    
#第五层
with tf.name_scope('encoding_layer5'):
    W_conv5 = weight_va([3,3,64,64],'W5')
    b_conv5 = bias_va([64],'b5')
    with tf.name_scope('sh_conv5'):
        sh_conv5 = tf.nn.relu(conv2d_1(sh_conv4,W_conv5)+b_conv5)
    with tf.name_scope('th_conv5'):
        th_conv5 = tf.nn.relu(conv2d_1(th_conv4,W_conv5)+b_conv5)
    
#第六层
with tf.name_scope('encoding_layer6'):
    W_conv6 = weight_va([3,3,64,128],'W6')
    b_conv6 = bias_va([128],'b6')
    with tf.name_scope('sh_conv6'):
        sh_conv6 = tf.nn.relu(conv2d_2(sh_conv5,W_conv6)+b_conv6)
    with tf.name_scope('th_conv6'):
        th_conv6 = tf.nn.relu(conv2d_2(th_conv5,W_conv6)+b_conv6)
    
#第七层
with tf.name_scope('encoding_layer7'):
    W_conv7 = weight_va([3,3,128,128],'W7')
    b_conv7 = bias_va([128],'b7')
    with tf.name_scope('sh_conv7'):
        sh_conv7 = tf.nn.relu(conv2d_1(sh_conv6,W_conv7)+b_conv7)
    with tf.name_scope('th_conv7'):
        th_conv7 = tf.nn.relu(conv2d_1(th_conv6,W_conv7)+b_conv7)
    
#第八层
with tf.name_scope('encoding_layer8'):
    W_conv8 = weight_va([3,3,128,256],'W8')
    b_conv8 = bias_va([256],'b8')
    with tf.name_scope('sh_conv8'):
        sh_conv8 = tf.nn.relu(conv2d_2(sh_conv7,W_conv8)+b_conv8)
    with tf.name_scope('th_conv8'):
        th_conv8 = tf.nn.relu(conv2d_2(th_conv7,W_conv8)+b_conv8)
       
with tf.name_scope('concat_laryer'):
    concat1 = tf.concat([th_conv8,sh_conv8],axis=3)
#flow解码器
with tf.name_scope('flow_decoding_layer_input'):
    fW = weight_va([3,3,512,512],'fW')
    fb = bias_va([512],'fb')
    with tf.name_scope('finp'):
        finp = tf.nn.relu(conv2d_1(concat1,fW)+fb)
    

with tf.name_scope ('flow_decoding_layer1'):
    fW_deconv1 = weight_va([3,3,256,512],'fW_deconv1')
    fb_deconv1 = bias_va([256],'fb_deconv1')
    with tf.name_scope('fh_deconv1'):
            fh_deconv1 = tf.nn.relu(deconv2d_2(finp,fW_deconv1,[batch_size,16,16,256])+fb_deconv1)

with tf.name_scope ('flow_decoding_layer2'):
    fW_conv2 = weight_va([3,3,256,256],'fW_conv2')
    fb_conv2 = bias_va([256],'fb_conv2')
    with tf.name_scope('fh_conv2'):
        fh_conv2 = tf.nn.relu(conv2d_1(fh_deconv1,fW_conv2)+fb_conv2)

with tf.name_scope ('flow_decoding_layer3'):    
    fW_conv3 = weight_va([3,3,256,256],'fW_conv3')
    fb_conv3 = bias_va([256],'fb_conv3')
    with tf.name_scope('fh_conv3'):
        fh_conv3 = conv2d_1(fh_conv2,fW_conv3)+fb_conv3

with tf.name_scope ('flow_decoding_layer4'):    
    fW_deconv4 = weight_va([3,3,128,256],'fW_deconv4')
    fb_deconv4 = bias_va([128],'fb_deconv4')
    with tf.name_scope('fh_conv4'):
        fh_deconv4 = tf.nn.relu(deconv2d_2(fh_conv3,fW_deconv4,[batch_size,32,32,128])+fb_deconv4)

with tf.name_scope ('flow_decoding_layer5'):    
    fW_conv5 = weight_va([3,3,128,128],'fW_conv5')
    fb_conv5 = bias_va([128],'fb_conv5')
    with tf.name_scope('fh_conv5'):
        fh_conv5 = tf.nn.relu(conv2d_1(fh_deconv4,fW_conv5)+fb_conv5)

with tf.name_scope ('flow_decoding_layer6'):    
    fW_conv6 = weight_va([3,3,128,128],'fW_conv6')
    fb_conv6 = bias_va([128],'fb_conv6')
    with tf.name_scope('fh_conv6'):
        fh_conv6 = conv2d_1(fh_conv5,fW_conv6)+fb_conv6

with tf.name_scope ('flow_decoding_layer7'):    
    fW_deconv7 = weight_va([3,3,64,128],'fW_conv7')
    fb_deconv7 = bias_va([64],'fb_deconv7')
    with tf.name_scope('fh_deconv7'):
        fh_deconv7 = tf.nn.relu(deconv2d_2(fh_conv6,fW_deconv7,[batch_size,32,32,64])+fb_deconv7)

with tf.name_scope ('flow_decoding_layer8'):    
    fW_conv8 = weight_va([3,3,64,64],'fW_conv8')
    fb_conv8 = bias_va([64],'fb_conv8')
    with tf.name_scope('fh_conv8'):
        fh_conv8 = tf.nn.relu(conv2d_1(fh_deconv7,fW_conv8)+fb_conv8)

with tf.name_scope ('flow_decoding_layer9'):    
    fW_conv9 = weight_va([3,3,64,64],'fW_conv9')
    fb_conv9 = bias_va([64],'fb_conv9')
    with tf.name_scope('fh_conv9'):
        fh_conv9 = conv2d_1(fh_conv8,fW_conv9)+fb_conv9

with tf.name_scope ('flow_decoding_layer10'):    
    fW_deconv10 = weight_va([3,3,32,64],'fW_deconv10')
    fb_deconv10 = bias_va([32],'fb_deconv10')
    with tf.name_scope('fh_deconv10'):
        fh_deconv10 = tf.nn.relu(deconv2d_2(fh_conv9,fW_deconv10,[batch_size,128,128,32])+fb_deconv10)

with tf.name_scope ('flow_decoding_layer11'):    
    fW_conv11 = weight_va([3,3,32,32],'fW_conv11')
    fb_conv11 = bias_va([32],'fb_conv11')
    with tf.name_scope('fh_conv11'):
        fh_conv11 = tf.nn.relu(conv2d_1(fh_deconv10,fW_conv11)+fb_conv11)

with tf.name_scope ('flow_decoding_layer12'):    
    fW_conv12 = weight_va([3,3,32,32],'fW_conv12')
    fb_conv12 = bias_va([32],'fb_conv12')
    with tf.name_scope('fh_conv12'):
        fh_conv12 = conv2d_1(fh_conv11,fW_conv12)+fb_conv12

with tf.name_scope ('flow_decoding_layer13'):    
    fW_deconv13 = weight_va([3,3,2,32],'fW_deconv13')
    fb_deconv13 = bias_va([2],'fb_deconv13')
    with tf.name_scope('fh_deconv13'):
        fh_deconv13 = tf.nn.relu(deconv2d_2(fh_conv12,fW_deconv13,[batch_size,128,128,2])+fb_deconv13) #！！！！

with tf.name_scope ('flow_decoding_layer14'):    
    fW_conv14 = weight_va([3,3,2,2],'fW_conv14')
    fb_conv14 = bias_va([2],'fb_conv14')
    with tf.name_scope('fh_conv14'):
        fh_conv14 = tf.nn.relu(conv2d_1(fh_deconv13,fW_conv14)+fb_conv14)

with tf.name_scope ('flow_decoding_layer15'):    
    fW_conv15 = weight_va([3,3,2,2],'fW_conv15')
    fb_conv15 = bias_va([2],'fb_conv15')
    with tf.name_scope('fh_conv15'):
        fh_conv15 = tf.nn.relu(conv2d_1(fh_conv14,fW_conv15)+fb_conv15)
    
with tf.name_scope('flow_decoding_layer_output'):    
    fW_conv16 = weight_va([3,3,2,2],'fW_conv16')
    fb_conv16 = bias_va([2],'fb_conv16')
    with tf.name_scope('flow_2d'):
        flow_2d = tf.nn.relu(conv2d_1(fh_conv15,fW_conv16)+fb_conv16)
#match解码器
with tf.name_scope('matchability_decoding_layer_input'):
    mW = weight_va([3,3,512,256],'mW')
    mb = bias_va([256],'mb')
    with tf.name_scope('minp'):
        minp = tf.nn.relu(conv2d_1(concat1,mW)+mb)

with tf.name_scope('matchability_decoding_layer1'):
    mW_deconv1 = weight_va([3,3,128,256],'mW_deconv1')
    mb_deconv1 = bias_va([128],'mb_deconv1')
    with tf.name_scope('mh_deconv1'):
        mh_deconv1 = tf.nn.relu(deconv2d_2(minp,mW_deconv1,[batch_size,16,16,128])+mb_deconv1)

with tf.name_scope('matchability_decoding_layer2'):    
    mW_conv2 = weight_va([3,3,128,128],'mW_conv2')
    mb_conv2 = bias_va([128],'mb_conv2')
    with tf.name_scope('mh_conv2'):
        mh_conv2 = tf.nn.relu(conv2d_1(mh_deconv1,mW_conv2)+mb_conv2)

with tf.name_scope('matchability_decoding_layer3'):    
    mW_conv3 = weight_va([3,3,128,128],'mW_conv3')
    mb_conv3 = bias_va([128],'mb_conv3')
    with tf.name_scope('mh_conv3'):
        mh_conv3 = conv2d_1(mh_conv2,mW_conv3)+mb_conv3

with tf.name_scope('matchability_decoding_layer4'):    
    mW_deconv4 = weight_va([3,3,64,128],'mW_deconv4')
    mb_deconv4 = bias_va([64],'mb_deconv4')
    with tf.name_scope('mh_deconv4'):
        mh_deconv4 = tf.nn.relu(deconv2d_2(mh_conv3,mW_deconv4,[batch_size,32,32,64])+mb_deconv4)

with tf.name_scope('matchability_decoding_layer5'):    
    mW_conv5 = weight_va([3,3,64,64],'mW_conv5')
    mb_conv5 = bias_va([64],'mb_conv5')
    with tf.name_scope('mh_conv5'):
        mh_conv5 = tf.nn.relu(conv2d_1(mh_deconv4,mW_conv5)+mb_conv5)

with tf.name_scope('matchability_decoding_layer6'):    
    mW_conv6 = weight_va([3,3,64,64],'mW_conv6')
    mb_conv6 = bias_va([64],'mb_conv6')
    with tf.name_scope('mh_conv6'):
        mh_conv6 = conv2d_1(mh_conv5,mW_conv6)+mb_conv6

with tf.name_scope('matchability_decoding_layer7'):    
    mW_deconv7 = weight_va([3,3,32,64],'mW_deconv7')
    mb_deconv7 = bias_va([32],'mb_deconv7')
    with tf.name_scope('mh_deconv7'):
        mh_deconv7 = tf.nn.relu(deconv2d_2(mh_conv6,mW_deconv7,[batch_size,64,64,32])+mb_deconv7)

with tf.name_scope('matchability_decoding_layer8'):    
    mW_conv8 = weight_va([3,3,32,32],'mW_conv8')
    mb_conv8 = bias_va([32],'mb_conv8')
    with tf.name_scope('mh_conv8'):
        mh_conv8 = tf.nn.relu(conv2d_1(mh_deconv7,mW_conv8)+mb_conv8)

with tf.name_scope('matchability_decoding_layer9'):    
    mW_conv9 = weight_va([3,3,32,32],'mW_conv9')
    mb_conv9 = bias_va([32],'mb_conv9')
    with tf.name_scope('mh_conv9'):
        mh_conv9 = conv2d_1(mh_conv8,mW_conv9)+mb_conv9

with tf.name_scope('matchability_decoding_layer10'):    
    mW_deconv10 = weight_va([3,3,16,32],'mW_deconv10')
    mb_deconv10 = bias_va([16],'mb_deconv10')
    with tf.name_scope('mh_deconv10'):
        mh_deconv10 = tf.nn.relu(deconv2d_2(mh_conv9,mW_deconv10,[batch_size,128,128,16])+mb_deconv10)

with tf.name_scope('matchability_decoding_layer11'):    
    mW_conv11 = weight_va([3,3,16,16],'mW_conv11')
    mb_conv11 = bias_va([16],'mb_conv11')
    with tf.name_scope('mh_conv11'):
        mh_conv11 = tf.nn.relu(conv2d_1(mh_deconv10,mW_conv11)+mb_conv11)

with tf.name_scope('matchability_decoding_layer12'):    
    mW_conv12 = weight_va([3,3,16,16],'mW_conv12')
    mb_conv12 = bias_va([16],'mb_conv12')
    with tf.name_scope('mh_conv12'):
        mh_conv12 = conv2d_1(mh_conv11,mW_conv12)+mb_conv12

with tf.name_scope('matchability_decoding_layer13'):    
    mW_deconv13 = weight_va([3,3,2,16],'mW_deconv13')
    mb_deconv13 = bias_va([2],'mb_deconv13')
    with tf.name_scope('mh_deconv13'):
        mh_deconv13 = tf.nn.relu(deconv2d_2(mh_conv12,mW_deconv13,[batch_size,128,128,2])+mb_deconv13)

with tf.name_scope('matchability_decoding_layer_output'):    
    mW_conv14 = weight_va([3,3,2,2],'mW_conv14')
    mb_conv14 = bias_va([2],'mb_conv14')
    with tf.name_scope('matchability'):
        matchability = tf.nn.softmax(conv2d_1(mh_deconv13,mW_conv14)+mb_conv14)


with tf.name_scope('loss'):
    loss = tf.reduce_mean(thmatch * tf.square(flow_2d - thflow)) + 0.15 * tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=thmatch,logits=matchability))
with tf.name_scope('train'):
    train_step = tf.train.AdamOptimizer(1e-4).minimize(loss)
saver = tf.train.Saver()

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    writer = tf.summary.FileWriter('logs/',sess.graph)
    for epoch in range(2):
        for batch in range(n_batch):
            sess.run(train_step,feed_dict = {source:  , target:  ,thflow:  ,thmatch:  ,keep_prob:0.7})
    saver.save(sess,"./checkpoint_dir/MyModel",max_to_keep=5, keep_checkpoint_every_n_hours=0.5) #储存位置，两小时储存一次，保存最近的5个数据
